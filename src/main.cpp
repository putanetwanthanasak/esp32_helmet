#include <Arduino.h>
#include <config.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <math.h>


// ========== GLOBALS ==========
Adafruit_MPU6050 mpu;
static float g_roll_deg  = 0.0f;
static float g_pitch_deg = 0.0f;
static unsigned long g_last_ms = 0;

// ====== 1) ‡∏≠‡πà‡∏≤‡∏ô IMU ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞" ======
struct IMURead {
  float Atotal_ms2;  // ‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏° m/s^2
  float roll_deg;    // ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤
  float pitch_deg;   // ‡∏Å‡πâ‡∏°/‡πÄ‡∏á‡∏¢
};

IMURead readIMU() {
  // Complementary filter ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏≤ ‡πÜ
  const float ALPHA = 0.96f;

  if (g_last_ms == 0) g_last_ms = millis();
  unsigned long now = millis();
  float dt = (now - g_last_ms) / 1000.0f;
  if (dt <= 0) dt = 0.001f;
  g_last_ms = now;

  sensors_event_t a, g, t;
  mpu.getEvent(&a, &g, &t);

  // ‡∏°‡∏∏‡∏°‡∏à‡∏≤‡∏Å Acc
  float roll_acc  = atan2f(a.acceleration.y, a.acceleration.z) * 180.0f / PI;
  float pitch_acc = atan2f(-a.acceleration.x,
                           sqrtf(a.acceleration.y*a.acceleration.y +
                                 a.acceleration.z*a.acceleration.z)) * 180.0f / PI;

  // Gyro (rad/s -> deg/s)
  float gx = g.gyro.x * 180.0f / PI;  // ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏ô X -> roll
  float gy = g.gyro.y * 180.0f / PI;  // ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏ô Y -> pitch

  // integrate + fuse
  float roll_gyro  = g_roll_deg  + gx * dt;
  float pitch_gyro = g_pitch_deg + gy * dt;
  g_roll_deg  = ALPHA * roll_gyro  + (1.0f - ALPHA) * roll_acc;
  g_pitch_deg = ALPHA * pitch_gyro + (1.0f - ALPHA) * pitch_acc;

  // ‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏°
  float Atotal = sqrtf(a.acceleration.x*a.acceleration.x +
                       a.acceleration.y*a.acceleration.y +
                       a.acceleration.z*a.acceleration.z);

  return IMURead{ Atotal, g_roll_deg, g_pitch_deg };
}

// ====== 2) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à "‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å" ‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏° ======
bool detectImpact(float Atotal_ms2) {
  return (Atotal_ms2 > IMPACT_THRESH_MS2);
}

// ====== 3) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à "‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥" ======
bool detectTilt(float roll_deg, float pitch_deg) {
  return (fabs(roll_deg) >= TILT_THRESH_DEG) || (fabs(pitch_deg) >= TILT_THRESH_DEG);
}

// ====== 4) ‡∏≠‡πà‡∏≤‡∏ô Shock sensor ‡πÅ‡∏ö‡∏ö debounce + latch (‡∏Ñ‡∏∑‡∏ô TRUE ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå) ======
bool readShockEvent() {
  static unsigned long lastChangeMs = 0;
  static int lastStable = SHOCK_ACTIVE_LOW ? HIGH : LOW; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏¥‡πà‡∏á
  static unsigned long lastShockMs = 0;

  int raw = digitalRead(SHOCK_PIN);
  int activeLevel = SHOCK_ACTIVE_LOW ? LOW : HIGH;

  unsigned long now = millis();

  // debounce ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  if (raw != lastStable && (now - lastChangeMs) > SHOCK_DEBOUNCE_MS) {
    lastChangeMs = now;
    lastStable = raw;
    if (lastStable == activeLevel) {
      lastShockMs = now; // ‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ä‡πá‡∏≠‡∏Å
      return true;
    }
  }

  // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á latch ‡∏¢‡∏±‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏°‡∏µ‡∏ä‡πá‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
  if (lastShockMs && (now - lastShockMs) <= SHOCK_LATCH_MS) {
    return true;
  }
  return false;
}

// ====== 5) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏ô (‡∏£‡∏ß‡∏° Impact + Tilt + Shock) ======
bool crashDecision(bool impactNow, bool tiltNow, bool shockNow) {
  static bool armed = false;
  static unsigned long armUntilMs = 0;
  static unsigned long tiltSinceMs = 0;

  unsigned long now = millis();

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ impact ‡∏´‡∏£‡∏∑‡∏≠ shock ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
  if (impactNow && shockNow) {
    armed = true;
    armUntilMs = now + ARM_WINDOW_MS;
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ impact/shock ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ tilt ‚Üí reset ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  if (!impactNow && !shockNow && !tiltNow) {
    armed = false;
    tiltSinceMs = 0;
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏Ñ‡πâ‡∏≤‡∏á
  if (tiltNow) {
    if (tiltSinceMs == 0) tiltSinceMs = now;
  } else {
    tiltSinceMs = 0;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á armed ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (armed && (now <= armUntilMs)) {
    if (tiltSinceMs && (now - tiltSinceMs) >= TILT_HOLD_MS) {
      armed = false;
      tiltSinceMs = 0;
      return true; // ‡∏•‡πâ‡∏°‡∏à‡∏£‡∏¥‡∏á
    }
  } else if (armed && (now > armUntilMs)) {
    // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    armed = false;
    tiltSinceMs = 0;
  }

  return false; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πâ‡∏°
}

void controlBuzzer(bool state) {
  if (BUZZER_ACTIVE_HIGH) {
    digitalWrite(BUZZER_PIN, state ? HIGH : LOW);
  } else {
    digitalWrite(BUZZER_PIN, state ? LOW : HIGH);
  }
}
void triggerCrashAlert() {
  Serial.println("üö® Crash detected! Turning on buzzer...");
  controlBuzzer(true);
  delay(BUZZER_DURATION);
  controlBuzzer(false);
}



// ========== Arduino setup/loop ==========
void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_SDA, I2C_SCL);

  pinMode(SHOCK_PIN, SHOCK_ACTIVE_LOW ? INPUT_PULLUP : INPUT);
  delay(50);

  if (!mpu.begin()) {
    Serial.println("MPU6050 not found!");
    while (1) delay(10);
  }
  mpu.setAccelerometerRange(MPU6050_RANGE_2_G);
  mpu.setGyroRange(MPU6050_RANGE_2000_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  delay(100);

  Serial.println("Ready.");
  pinMode(BUZZER_PIN, OUTPUT);
  controlBuzzer(false);  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
}

void loop() {
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏à‡∏≤‡∏Å IMU
  IMURead imu = readIMU();

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏¢‡πà‡∏≠‡∏¢
  bool impact = detectImpact(imu.Atotal_ms2);
  bool tilt   = detectTilt(imu.roll_deg, imu.pitch_deg);
  bool shock  = readShockEvent();

  // ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏ô‡∏à‡∏£‡∏¥‡∏á" ?
  bool crashed = crashDecision(impact, tilt, shock);

  // DEBUG/‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î
  // Serial.print("A:"); Serial.print(imu.Atotal_ms2, 2);
  // Serial.print("  R:"); Serial.print(imu.roll_deg, 1);
  // Serial.print("  P:"); Serial.print(imu.pitch_deg, 1);
  // Serial.print("  | impact="); Serial.print(impact);
  // Serial.print(" tilt="); Serial.print(tilt);
  // Serial.print(" shock="); Serial.print(shock);
  // Serial.print("  => CRASH=");
  // Serial.println(crashed ? "YES" : "no");

  if (crashed) {
    // TODO: ‡πÄ‡∏õ‡∏¥‡∏î Buzzer/‡πÑ‡∏ü‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô/‡πÄ‡∏£‡∏¥‡πà‡∏° countdown ‡∏™‡πà‡∏á GPS
    // triggerBuzzer(); startSOS(); sendGPS();
    triggerCrashAlert();
  }

  delay(100);
}