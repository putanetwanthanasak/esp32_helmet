#include <Arduino.h>
#include <config.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <math.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <U8g2lib.h>

// --- !!! ‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏´‡∏•‡∏±‡∏Å: 1 = ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á, 0 = ‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á !!! ---
#define SIMULATION_MODE 1


//=================================================================
// == 1. GLOBAL VARIABLES & OBJECTS (‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏•‡∏∞ Object ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á)
//=================================================================

Adafruit_MPU6050 mpu;
static float g_roll_deg  = 0.0f;
static float g_pitch_deg = 0.0f;
static unsigned long g_last_ms = 0;

// --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (U8g2) ---
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* scl=*/ I2C_SCL, /* sda=*/ I2C_SDA);

// --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firebase) ---
String g_firstname, g_lastname, g_blood, g_disease, g_allergy, g_medication, g_emer_name, g_emer_phone;
String g_fetchError = ""; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à


//=================================================================
// == 2. SENSOR LOGIC FUNCTIONS (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Sensor)
//=================================================================
// (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ ‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)

// ====== 1) ‡∏≠‡πà‡∏≤‡∏ô IMU ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô "‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞" ======
struct IMURead {
  float Atotal_ms2;  // ‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏° m/s^2
  float roll_deg;    // ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤
  float pitch_deg;   // ‡∏Å‡πâ‡∏°/‡πÄ‡∏á‡∏¢
};

IMURead readIMU() {
  // Complementary filter ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏≤ ‡πÜ
  const float ALPHA = 0.96f;

  if (g_last_ms == 0) g_last_ms = millis();
  unsigned long now = millis();
  float dt = (now - g_last_ms) / 1000.0f;
  if (dt <= 0) dt = 0.001f;
  g_last_ms = now;

  sensors_event_t a, g, t;
  mpu.getEvent(&a, &g, &t);

  // ‡∏°‡∏∏‡∏°‡∏à‡∏≤‡∏Å Acc
  float roll_acc  = atan2f(a.acceleration.y, a.acceleration.z) * 180.0f / PI;
  float pitch_acc = atan2f(-a.acceleration.x,
                           sqrtf(a.acceleration.y*a.acceleration.y +
                                 a.acceleration.z*a.acceleration.z)) * 180.0f / PI;

  // Gyro (rad/s -> deg/s)
  float gx = g.gyro.x * 180.0f / PI;  // ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏ô X -> roll
  float gy = g.gyro.y * 180.0f / PI;  // ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏ô Y -> pitch

  // integrate + fuse
  float roll_gyro  = g_roll_deg  + gx * dt;
  float pitch_gyro = g_pitch_deg + gy * dt;
  g_roll_deg  = ALPHA * roll_gyro  + (1.0f - ALPHA) * roll_acc;
  g_pitch_deg = ALPHA * pitch_gyro + (1.0f - ALPHA) * pitch_acc;

  // ‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏°
  float Atotal = sqrtf(a.acceleration.x*a.acceleration.x +
                       a.acceleration.y*a.acceleration.y +
                       a.acceleration.z*a.acceleration.z);

  return IMURead{ Atotal, g_roll_deg, g_pitch_deg };
}

// ====== 2) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à "‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å" ‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏£‡∏ß‡∏° ======
bool detectImpact(float Atotal_ms2) {
  return (Atotal_ms2 > IMPACT_THRESH_MS2);
}

// ====== 3) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à "‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥" ======
bool detectTilt(float roll_deg, float pitch_deg) {
  return (fabs(roll_deg) >= TILT_THRESH_DEG) || (fabs(pitch_deg) >= TILT_THRESH_DEG);
}

// ====== 4) ‡∏≠‡πà‡∏≤‡∏ô Shock sensor ‡πÅ‡∏ö‡∏ö debounce + latch (‡∏Ñ‡∏∑‡∏ô TRUE ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå) ======
bool readShockEvent() {
  static unsigned long lastChangeMs = 0;
  static int lastStable = SHOCK_ACTIVE_LOW ? HIGH : LOW; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏¥‡πà‡∏á
  static unsigned long lastShockMs = 0;

  int raw = digitalRead(SHOCK_PIN);
  int activeLevel = SHOCK_ACTIVE_LOW ? LOW : HIGH;

  unsigned long now = millis();

  // debounce ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  if (raw != lastStable && (now - lastChangeMs) > SHOCK_DEBOUNCE_MS) {
    lastChangeMs = now;
    lastStable = raw;
    if (lastStable == activeLevel) {
      lastShockMs = now; // ‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ä‡πá‡∏≠‡∏Å
      return true;
    }
  }

  // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á latch ‡∏¢‡∏±‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏°‡∏µ‡∏ä‡πá‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
  if (lastShockMs && (now - lastShockMs) <= SHOCK_LATCH_MS) {
    return true;
  }
  return false;
}

// ====== 5) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏ô (‡∏£‡∏ß‡∏° Impact + Tilt + Shock) ======
bool crashDecision(bool impactNow, bool tiltNow, bool shockNow) {
  static bool armed = false;
  static unsigned long armUntilMs = 0;
  static unsigned long tiltSinceMs = 0;

  unsigned long now = millis();

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ impact ‡∏´‡∏£‡∏∑‡∏≠ shock ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
  if (impactNow && shockNow) {
    armed = true;
    armUntilMs = now + ARM_WINDOW_MS;
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ impact/shock ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ tilt ‚Üí reset ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  if (!impactNow && !shockNow && !tiltNow) {
    armed = false;
    tiltSinceMs = 0;
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏Ñ‡πâ‡∏≤‡∏á
  if (tiltNow) {
    if (tiltSinceMs == 0) tiltSinceMs = now;
  } else {
    tiltSinceMs = 0;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á armed ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (armed && (now <= armUntilMs)) {
    if (tiltSinceMs && (now - tiltSinceMs) >= TILT_HOLD_MS) {
      armed = false;
      tiltSinceMs = 0;
      return true; // ‡∏•‡πâ‡∏°‡∏à‡∏£‡∏¥‡∏á
    }
  } else if (armed && (now > armUntilMs)) {
    // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    armed = false;
    tiltSinceMs = 0;
  }

  return false; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πâ‡∏°
}


//=================================================================
// == 3. SYSTEM & HELPER FUNCTIONS (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö)
//=================================================================

void controlBuzzer(bool state) {
  if (BUZZER_ACTIVE_HIGH) {
    digitalWrite(BUZZER_PIN, state ? HIGH : LOW);
  } else {
    digitalWrite(BUZZER_PIN, state ? LOW : HIGH);
  }
}
void triggerCrashAlert() {
  Serial.println("üö® Crash detected! Turning on buzzer...");
  controlBuzzer(true);
  delay(BUZZER_DURATION);
  controlBuzzer(false);
}

void setupWiFi() {
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
}

void setupFirebase() {
  config.host = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Serial.println("Firebase connected");
}

void setupDisplay() {
  u8g2.begin();
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr); // <--- ‡πÉ‡∏ä‡πâ Font ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å (8px)
  u8g2.drawStr(0, 12, "System Ready");
  u8g2.sendBuffer(); 
  Serial.println("OLED (U8g2) Initialized");
}


//=================================================================
// == 4. CORE APP LOGIC (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°)
//=================================================================

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Fetch) ---
// (‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
bool fetchCrashInfo() {
  g_fetchError = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Error ‡πÄ‡∏Å‡πà‡∏≤
  Serial.println("Fetching user data from Firebase...");
  
  // ‡πÅ‡∏™‡∏î‡∏á "Loading..." ‡∏ö‡∏ô‡∏à‡∏≠
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB12_tr); // Font ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "CRASH!"
  u8g2.drawStr(0, 15, "CRASH!");
  u8g2.setFont(u8g2_font_ncenB08_tr); // Font ‡πÄ‡∏•‡πá‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "Loading"
  u8g2.drawStr(0, 35, "Loading data...");
  u8g2.sendBuffer();

  String path = String("/users/");
  path.concat(String(FIREBASE_USER_ID));
  
  if (Firebase.get(fbdo, path)) {
    if (fbdo.dataType() == "json") {
      FirebaseJson json; 
      json.setJsonData(fbdo.stringData()); 
      FirebaseJsonData result;
      
      // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ---
      json.get(result, "firstname");      g_firstname = result.stringValue;
      json.get(result, "lastname");       g_lastname = result.stringValue;
      json.get(result, "bloodgroup");     g_blood = result.stringValue;
      json.get(result, "disease");        g_disease = result.stringValue;
      json.get(result, "allergy");        g_allergy = result.stringValue;
      json.get(result, "medication");     g_medication = result.stringValue;
      json.get(result, "emergencyname");  g_emer_name = result.stringValue;
      json.get(result, "emergencyphone"); g_emer_phone = result.stringValue;

      Serial.println("Data fetched!");
      return true; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      
    } else {
      Serial.println("Failed to parse JSON");
      g_fetchError = "Data Error";
      return false; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }
  } else {
    Serial.print(F("Firebase get failed: "));
    Serial.println(fbdo.errorReason());
    g_fetchError = "Firebase Error";
    return false; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  }
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö "Text ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô" (Scrolling) ---
void displayScrollingInfo() {
  const long totalDisplayTime = 30000; // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  const int lineHeight = 10; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (font 8px + 2px spacing)
  const int totalLines = 8;
  const int totalHeight = totalLines * lineHeight; // 80px (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á Text ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  const int screenHeight = 64; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≠

  int yStart = screenHeight; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 64 (‡∏ô‡∏≠‡∏Å‡∏à‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
  int yEnd = -totalHeight;   // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà -80 (‡∏ô‡∏≠‡∏Å‡∏à‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)
  int yCurrent = yStart;

  unsigned long startTime = millis();
  unsigned long lastFrameTime = 0;
  const int frameDelay = 50; // 50ms = 20fps (20 ‡πÄ‡∏ü‡∏£‡∏°‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  while (millis() - startTime < totalDisplayTime) {
    
    unsigned long now = millis();
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 50ms ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if (now - lastFrameTime < frameDelay) {
      delay(1); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      continue; 
    }
    lastFrameTime = now;
    
    yCurrent--; // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô 1 pixel
    if (yCurrent < yEnd) {
      yCurrent = yStart; // ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    }

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr); // Font ‡πÄ‡∏•‡πá‡∏Å

    int y = yCurrent;

    // --- ‡∏™‡∏£‡πâ‡∏≤‡∏á String ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ .concat() (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error) ---
    String line1 = "First: "; line1.concat(g_firstname);
    String line2 = "Last: ";  line2.concat(g_lastname);
    String line3 = "Blood: "; line3.concat(g_blood);
    String line4 = "Disease: "; line4.concat(g_disease);
    String line5 = "Allergy: "; line5.concat(g_allergy);
    String line6 = "Meds: ";    line6.concat(g_medication);
    String line7 = "Contact: "; line7.concat(g_emer_name);
    String line8 = "Phone: ";   line8.concat(g_emer_phone);

    // --- ‡∏ß‡∏≤‡∏î 8 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡∏ó‡∏µ‡πà 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) ---
    u8g2.drawStr(0, y, line1.substring(0, 20).c_str()); y += lineHeight;
    u8g2.drawStr(0, y, line2.substring(0, 20).c_str()); y += lineHeight;
    u8g2.drawStr(0, y, line3.substring(0, 20).c_str()); y += lineHeight;
    u8g2.drawStr(0, y, line4.substring(0, 20).c_str()); y += lineHeight;
    u8g2.drawStr(0, y, line5.substring(0, 20).c_str()); y += lineHeight;
    u8g2.drawStr(0, y, line6.substring(0, 20).c_str()); y += lineHeight;
    u8g2.drawStr(0, y, line7.substring(0, 20).c_str()); y += lineHeight;
    u8g2.drawStr(0, y, line8.substring(0, 20).c_str());
    
    u8g2.sendBuffer();
  }
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ---
void displayFetchError() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB10_tr);
  u8g2.drawStr(0, 15, "FETCH FAILED");
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 40, g_fetchError.c_str()); // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
  u8g2.sendBuffer();
}


//=================================================================
// == 5. ARDUINO SETUP & LOOP (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å Setup ‡πÅ‡∏•‡∏∞ Loop)
//=================================================================

void setup() {
  Serial.begin(115200);
  
  setupDisplay(); // <--- ‡πÉ‡∏ä‡πâ U8g2
  setupWiFi();
  setupFirebase();
  
  Wire.begin(I2C_SDA, I2C_SCL);

  pinMode(SHOCK_PIN, SHOCK_ACTIVE_LOW ? INPUT_PULLUP : INPUT);
  delay(50);

  // --- !!! ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° SIMULATION_MODE !!! ---
  #if SIMULATION_MODE == 1
    // ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ MPU
    Serial.println(F("!!! MPU6050 check SKIPPED for simulation !!!"));
  #else
    // ‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MPU
    if (!mpu.begin()) {
      Serial.println(F("MPU6050 not found!"));
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏à‡∏≠‡∏ß‡πà‡∏≤ Error
      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_ncenB08_tr);
      u8g2.drawStr(0, 12, "MPU6050 Error!");
      u8g2.drawStr(0, 24, "Check wiring.");
      u8g2.sendBuffer();
      while (1) delay(10); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    }
    Serial.println(F("MPU6050 Initialized."));
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MPU
    mpu.setAccelerometerRange(MPU6050_RANGE_2_G);
    mpu.setGyroRange(MPU6050_RANGE_2000_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  #endif
  // --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô MPU setup ---

  delay(100);

  Serial.println(F("System Ready."));
  pinMode(BUZZER_PIN, OUTPUT);
  controlBuzzer(false);
}

void loop() {
  
  bool crashDetected = false; // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏ô

  #if SIMULATION_MODE == 1
    // --- !!! ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á !!! ---
    
    Serial.println("Simulating crash event in 3 seconds...");
    delay(3000); // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥
    crashDetected = true; // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ä‡∏ô

  #else
    // --- !!! ‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á !!! ---
    
    // 1. ‡∏≠‡πà‡∏≤‡∏ô Sensor
    IMURead imu = readIMU();
    bool impact = detectImpact(imu.Atotal_ms2);
    bool tilt   = detectTilt(imu.roll_deg, imu.pitch_deg);
    bool shock  = readShockEvent();
    
    // 2. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    crashDetected = crashDecision(impact, tilt, shock);

  #endif

  // --- ( Logic ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ä‡∏ô (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á 2 ‡πÇ‡∏´‡∏°‡∏î) ) ---
  if (crashDetected) {
    triggerCrashAlert(); // ‡∏™‡∏±‡πà‡∏á Buzzer ‡∏î‡∏±‡∏á
    
    if (fetchCrashInfo()) {
      // ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (true)
      Serial.println("Fetch OK. Starting scrolling display...");
      displayScrollingInfo(); // <--- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "Text ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô"
      
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (false)
      Serial.println("Fetch FAILED. Displaying error.");
      displayFetchError(); // <--- ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Error
      delay(30000); // <--- ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
    }
    
    Serial.println("Crash sequence complete. Resetting loop.");
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "System Ready"
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(0, 12, "System Ready");
    u8g2.sendBuffer();
  }
  
  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ô loop ‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á)
  delay(100); 
}